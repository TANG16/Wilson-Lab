function [slices, header] = readImageStack( fileName, hAxDisplayImages )
%READIMAGESTACK Reads image stack generated by ScanImage
%   Jesse Wilson (jesse.wilson@duke.edu) 2011
%   (Warren Lab, Duke University)
%   Basic format: 
%   commented lines, #-delimited (or %-delimited) with information (key = value) pairs
%   followed by slicenumber=no., position = 1, 2,3
%
% optional argument hDisplayImages shows each image as it loads
%
% This function caches image stacks as a .mat file, and will load the
% cached file instead of the raw ASCII data if the .mat file exists.

    % for now, ignore the extra info, but come back to this later
    % todo: try/catch, return empty if failed
    % todo: return z-pos or t-delay depending on the type of stack taken.
    %       (Should be able to read this from the header)

% CHANGELOG:
% 3/7/2011:
%   - Added feature to cache loaded files in matlab format to speed up
%     loading times.
% 5/25/2011:
%   - fixed header parsing to accept % as a comment character
% 5/27/2011:
%   - fixed reading of date in header
    readImageStackVersion = 20110527.0;    % increment this each time something changes
    loaded = 0;
    
    % look for matlab cached version, if it exists
    cacheFileName = [fileName(1:(end-4)), '.mat'];
    
    if exist( cacheFileName )
        dat = load( cacheFileName );
        
        % check that the cache is up to date
        if( isfield(dat, 'readImageStackVersion') )
            if( dat.readImageStackVersion == readImageStackVersion )
                slices = dat.slices;
                header = dat.header;
                loaded = 1;
            else
                loaded = 0;     % if not up to date, flag to re-open
            end
        else
            loaded = 0;
        end
    end
        
    if( loaded == 0 )

        fid = fopen( fileName );

        if fid == 0
            disp(['Could not open file: ', fileName]);
            slices = [];
        else

            % determine whether or not to display images while loading
           if ~isempty( hAxDisplayImages )
                axes( hAxDisplayImages )
                doDisplay = 1;
           else
               doDisplay = 0;
           end
            % assume imageStack file has '.dat' appended
            baseFileName = fileName(1:(end-4));

            iSlice = 0;

            % loop through file line by line
            tline = fgetl(fid);
            header = [];
            while ischar(tline)
                if (tline(1) == '#' || tline(1) == '%')
                    % header line

                    % parse string into:
                    % '# key = value' or '% key = value'
                    [~, tok] = ...
                        regexpi(tline,'[#|%] (.+) = (.*)','match','tokens');
                    
                    if isempty(tok)
                        % treat as a comment
                        disp(['comment: ', tline]);
                    else
                        % treat as a key/value pair

                        key = tok{:}{1};
                        val = tok{:}{2};

                        % convert value to number, if possible
                        if ~(strcmp(key,'date') || strcmp(key,'time'))
                            valNum = str2num(val);
                            if ~isempty( valNum )
                                val = valNum;
                            end
                        end

                        % remove all non-alphanumeric an underscore characters
                        % from key, to make a valid key,
                        % and get rid of first character if it's a number
                        key = regexprep(key,'^\d+|[^\w]','');


                        % store in header structure
                        header = setfield(header, key, val);
                    end
                    
                else
                    % check if header was formed correctly
                    % just check presence of one field
                    % (ideally we should check all fields)
                    if ~isfield(header, 'linesperframe')
                        error('Header not read correctly.');
                    end
                    
                    % move on to loading the slice
                    iSlice = iSlice + 1;
                    % break apart into position values
                    A = sscanf(tline, 'slicenumber = %d , position = %f\t%f\t%f');

                    slices(iSlice).slicenumber = A(1);
                    slices(iSlice).posX = A(2);
                    slices(iSlice).posY = A(2);
                    slices(iSlice).posZ = A(4);
                    slices(iSlice).delays = -A(4) * 2 / 299.792458;

                    % generate file name corresponding to slice
                    imageFileName = ...
                        [baseFileName,'_',num2str(slices(iSlice).slicenumber)];


                    disp(['Loading slice ', num2str(iSlice)]);
                    slices(iSlice).imageData =...
                        readImage(imageFileName, ...
                                  header.linesperframe, ...
                                  header.pixelsperline );
                    doDisplay = 1;
                    if doDisplay
                        imagesc(slices(iSlice).imageData{1});
                        set(gca,'YDir','normal');
                        drawnow;
                    end

                end
                tline = fgetl(fid);
            end

            fclose(fid);

        end
        
        
        
        % save to cache
        try
            save( cacheFileName, 'slices','header', 'readImageStackVersion' );
        catch
            warning('Could not write .mat file. Remeber that archive is write-protected.');
        end

    end
end

